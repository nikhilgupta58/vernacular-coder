export default {
  es: '#         4\n#       /   \\\n#      2     6\n#     / \\   / \\ \n#    1   3|5   7\n\n\nclase Node:\n    def __inic__(misma, datos):\n        misma.izquierda = nada\n        misma.derecho = nada\n        misma.datos = datos\n\n    # inserte Node\n    def inserte(misma, datos):\n        if misma.datos:\n            if datos < misma.datos:\n                if misma.izquierda is nada:\n                    misma.izquierda = Node(datos)\n                otracosa:\n                    misma.izquierda.inserte(datos)\n            osi datos > misma.datos:\n                if misma.derecho is nada:\n                    misma.derecho = Node(datos)\n                otracosa:\n                    misma.derecho.inserte(datos)\n        otracosa:\n            misma.datos = datos\n\n    def pre_orden_transverso(misma, node):\n        if no node:\n            regresar\n        misma.visite(node)\n        misma.pre_orden_transverso(node.izquierda)\n        misma.pre_orden_transverso(node.derecho)\n\n    def en_orden_transverso(misma, node):\n        if no node:\n            regresar\n        misma.en_orden_transverso(node.izquierda)\n        misma.visite(node)\n        misma.en_orden_transverso(node.derecho)\n\n    def después_orden_transverso(misma, node):\n        if no node:\n            regresar\n        misma.después_orden_transverso(node.izquierda)\n        misma.después_orden_transverso(node.derecho)\n        misma.visite(node)\n\n    def visite(misma, node):\n        impríma(cadena(node.datos) + "  ", fin =\'\')\n\n\n# árbol.\nraíz = Node(4)\nraíz.inserte(2)\nraíz.inserte(1)\nraíz.inserte(3)\nraíz.inserte(6)\nraíz.inserte(5)\nraíz.inserte(7)\n\n# transverso.\nimpríma("***************** Pre_order transverso ******************")\nraíz.pre_orden_transverso(raíz)\nimpríma()\nimpríma("***************** In_order transverso ******************")\nraíz.en_orden_transverso(raíz)\nimpríma()\nimpríma("***************** Post_order transverso ******************")\nraíz.después_orden_transverso(raíz)\n\n',
  hi: '#         4\n#       /   \\\n#      2     6\n#     / \\   / \\ \n#    1   3|5   7\n\n\nश्रेणी पत्ता:\n    परिभाषा प्रारंभ(आत्म, जानकारी):\n        आत्म.बायाँ = कुछनहीं\n        आत्म.दायाँ = कुछनहीं\n        आत्म.जानकारी = जानकारी\n\n    # सम्मिलित पत्ता\n    परिभाषा सम्मिलित(आत्म, जानकारी):\n        यदि आत्म.जानकारी:\n            यदि जानकारी < आत्म.जानकारी:\n                यदि आत्म.बायाँ है कुछनहीं:\n                    आत्म.बायाँ = पत्ता(जानकारी)\n                वरना:\n                    आत्म.बायाँ.सम्मिलित(जानकारी)\n            याफिर जानकारी > आत्म.जानकारी:\n                यदि आत्म.दायाँ है कुछनहीं:\n                    आत्म.दायाँ = पत्ता(जानकारी)\n                वरना:\n                    आत्म.दायाँ.सम्मिलित(जानकारी)\n        वरना:\n            आत्म.जानकारी = जानकारी\n\n    परिभाषा जड़_पहले_दौरा(आत्म, पत्ता):\n        यदि नहीं पत्ता:\n            भेजें\n        आत्म.मिलें(पत्ता)\n        आत्म.जड़_पहले_दौरा(पत्ता.बायाँ)\n        आत्म.जड़_पहले_दौरा(पत्ता.दायाँ)\n\n    परिभाषा जड़_क्रमी_दौरा(आत्म, पत्ता):\n        यदि नहीं पत्ता:\n            भेजें\n        आत्म.जड़_क्रमी_दौरा(पत्ता.बायाँ)\n        आत्म.मिलें(पत्ता)\n        आत्म.जड़_क्रमी_दौरा(पत्ता.दायाँ)\n\n    परिभाषा जड़_अंत_दौरा(आत्म, पत्ता):\n        यदि नहीं पत्ता:\n            भेजें\n        आत्म.जड़_अंत_दौरा(पत्ता.बायाँ)\n        आत्म.जड़_अंत_दौरा(पत्ता.दायाँ)\n        आत्म.मिलें(पत्ता)\n\n    परिभाषा मिलें(आत्म, पत्ता):\n        छापो(माला(पत्ता.जानकारी) + "  ", अंत =\'\')\n\n\n# पेड़ बनाएँ.\nजड़ = पत्ता(4)\nजड़.सम्मिलित(2)\nजड़.सम्मिलित(1)\nजड़.सम्मिलित(3)\nजड़.सम्मिलित(6)\nजड़.सम्मिलित(5)\nजड़.सम्मिलित(7)\n\n# दौरा.\nछापो("***************** जड़_पहले दौरा ******************")\nजड़.जड़_पहले_दौरा(जड़)\nछापो()\nछापो("***************** जड़_क्रमी दौरा ******************")\nजड़.जड़_क्रमी_दौरा(जड़)\nछापो()\nछापो("***************** जड़_अंत दौरा ******************")\nजड़.जड़_अंत_दौरा(जड़)\n\n',
  vn: '#         4\n#       /   \\\n#      2     6\n#     / \\   / \\ \n#    1   3|5   7\n\n\nlớp Nút:\n    định __khởi__(tự, số_liệu):\n        tự.trái = không_ai\n        tự.phải = không_ai\n        tự.số_liệu = số_liệu\n\n    # để_thêm Nút\n    định để_thêm(tự, số_liệu):\n        nếu tự.số_liệu:\n            nếu số_liệu < tự.số_liệu:\n                nếu tự.trái là không_ai:\n                    tự.trái = Nút(số_liệu)\n                khác:\n                    tự.trái.để_thêm(số_liệu)\n            khác_nếu số_liệu > tự.số_liệu:\n                nếu tự.phải là không_ai:\n                    tự.phải = Nút(số_liệu)\n                khác:\n                    tự.phải.để_thêm(số_liệu)\n        khác:\n            tự.số_liệu = số_liệu\n\n    định thứ_tự_qua_trước(tự, Nút):\n        nếu không Nút:\n            quay_về\n        tự.vlàit(Nút)\n        tự.thứ_tự_qua_trước(Nút.trái)\n        tự.thứ_tự_qua_trước(Nút.phải)\n\n    định thứ_tự_qua_giữa(tự, Nút):\n        nếu không Nút:\n            quay_về\n        tự.thứ_tự_qua_giữa(Nút.trái)\n        tự.vlàit(Nút)\n        tự.thứ_tự_qua_giữa(Nút.phải)\n\n    định thứ_tư_qua_sau(tự, Nút):\n        nếu không Nút:\n            quay_về\n        tự.thứ_tư_qua_sau(Nút.trái)\n        tự.thứ_tư_qua_sau(Nút.phải)\n        tự.vlàit(Nút)\n\n    định vlàit(tự, Nút):\n        in(dây(Nút.số_liệu) + "  ", hết =\'\')\n\n\n# Create tree.\ngốc = Nút(4)\ngốc.để_thêm(2)\ngốc.để_thêm(1)\ngốc.để_thêm(3)\ngốc.để_thêm(6)\ngốc.để_thêm(5)\ngốc.để_thêm(7)\n\n# Traverse.\nin("***************** Pre_order traversal ******************")\ngốc.thứ_tự_qua_trước(gốc)\nin()\nin("***************** In_order traversal ******************")\ngốc.thứ_tự_qua_giữa(gốc)\nin()\nin("***************** Post_order traversal ******************")\ngốc.thứ_tư_qua_sau(gốc)\n\n'
}
